generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String? @db.Text
  oauth_token        String? @db.Text
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id            Int         @id @default(autoincrement())
  name          String?
  email         String?     @unique
  emailVerified  DateTime?   @map("email_verified")
  image         String?
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]
  feedConfig     FeedConfig?
  savedFeeds    Saved[]

  @@map(name: "users")
}

model VerificationToken {
  identifier  String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model FeedConfig {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  config     Json
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime? @updatedAt @map(name: "updated_at")

  @@unique([userId])
  @@index([userId])
  @@map(name: "feedconfig")
}

model Saved {
  id             Int       @id @default(autoincrement())
  userId         Int       @map("user_id")
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  title          String    @db.Text
  url            String    @db.Text
  alternativeUrl String?   @map(name: "alternative_url") @db.Text
  active         Boolean   @default(true)
  createdAt      DateTime  @default(now()) @map(name: "created_at")
  updatedAt      DateTime? @updatedAt @map(name: "updated_at")

  @@index([userId])
  @@map(name: "saved")
}
